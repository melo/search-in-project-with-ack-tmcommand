<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>5A9D4FC6-6CBE-11D9-A21B-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rcgi

# By Henrik Nyh &lt;http://henrik.nyh.se&gt; 2007-06-26
# Free to modify and redistribute with credit.
#
# Updated to use with ack by Pedro Melo &lt;melo@simplicidade.org&gt; 2008-05-26
# Support for TM_SELECTED_FILES by Corey Jewett &lt;ml@syntheticplayground.com&gt; 2008-05-30
#
# **NOTE WELL**: TextMate does not inherit your PATH, so if you this
# command does not find it define the environment variable
# TM_ACK_COMMAND_PATH in your Preferences &gt; Advanced &gt; Shell Variables with
# the full path of your copy of the ack command.
#

%w{ui web_preview escape textmate tm/process}.each { |lib| require "%s/lib/%s" % [ENV['TM_SUPPORT_PATH'], lib] }

ack_cmd=ENV['TM_ACK_COMMAND_PATH'] || 'ack'
TextMate.require_cmd(ack_cmd)

NAME = "Search in Project with ack"
HEAD  = &lt;&lt;-HTML
  &lt;style type="text/css"&gt;
    table { font-size:0.9em; border-collapse:collapse; border-bottom:1px solid #555; }
    h2 { font-size:1.3em; }
    td { vertical-align:top; white-space:nowrap; padding:0.4em 1em; }
    tr td:first-child { text-align:right; padding-right:1.5em; }
    tr.binary { background:#E8AFA8; }
    tr.binary.odd { background:#E0A7A2; }
    tr#empty { border-bottom:1px solid #FFF; }
    tr#empty td { text-align:center; }
    tr.newFile, tr.binary { border-top:1px solid #555; }
    .keyword { font-weight:bold; margin:0 0.1em; }
    .ellipsis { color:#777; margin:0 0.5em; }
  &lt;/style&gt;
  &lt;script type="text/javascript"&gt;
    function reveal_file(path) {
      const quote = '"';
      const command = "osascript -e ' tell app "+quote+"Finder"+quote+"' " +
                        " -e 'reveal (POSIX file " +quote+path+quote + ")' " +
                        " -e 'activate' " + 
                      " -e 'end' ";
      TextMate.system(command, null);
    }

  function findPos(obj) {
    var curleft = curtop = 0;
    if (obj.offsetParent) {
      curleft = obj.offsetLeft
      curtop = obj.offsetTop
      while (obj = obj.offsetParent) {
        curleft += obj.offsetLeft
        curtop += obj.offsetTop
      }
    }
    return {left: curleft, top: curtop};
  }
  
  function resizeTableToFit() {
    var table = document.getElementsByTagName("table")[0];
    const minWidth = 450, minHeight = 250;

    var pos = findPos(table);
    var tableFitWidth = table.offsetWidth + pos.left * 2;
    var tableFitHeight = table.offsetHeight + pos.top + 50;
    var screenFitWidth = screen.width - 150;
    var screenFitHeight = screen.height - 150;

    var setWidth = tableFitWidth &gt; screenFitWidth ? screenFitWidth : tableFitWidth;
    var setHeight = tableFitHeight &gt; screenFitHeight ? screenFitHeight : tableFitHeight;  
    setWidth = setWidth &lt; minWidth ? minWidth : setWidth;
    setHeight = setHeight &lt; minHeight ? minHeight : setHeight;

    window.resizeTo(setWidth, setHeight);
  }
  
  &lt;/script&gt;
HTML

RESIZE_TABLE = &lt;&lt;-HTML
  &lt;script type="text/javascript"&gt;
    resizeTableToFit();
  &lt;/script&gt;
HTML

def ellipsize_path(path)
  path.sub(/^(.{30})(.{10,})(.{30})$/) { "#$1⋯#$3" }
end

def escape(string)
  CGI.escapeHTML(string)
end

def bail(message)
  puts &lt;&lt;-HTML
    &lt;h2&gt;#{ message }&lt;/h2&gt;
  HTML
  html_footer
  exit
end

directory = ENV['TM_PROJECT_DIRECTORY'] || 
            ( ENV['TM_FILEPATH'] &amp;&amp; File.dirname(ENV['TM_FILEPATH']) )

puts html_head(
  :window_title =&gt; NAME,
  :page_title   =&gt; NAME,
  :sub_title    =&gt; directory || "Error",
  :html_head    =&gt; HEAD
)

bail("Not in a saved file") unless directory

query = TextMate::UI.request_string(:title =&gt; "Search in Project with ack", :prompt =&gt; "Find this:", :default =&gt; %x{pbpaste -pboard find})
bail("Search aborted") unless query
IO.popen('pbcopy -pboard find', 'w') { |copy| copy.print query }

puts &lt;&lt;-HTML
  &lt;h2&gt;Searching for “#{ escape(query) }”&lt;/h2&gt;
HTML

selected_files=TextMate.selected_files

if selected_files
	command = [ack_cmd, "-H", query, selected_files]
	puts &lt;&lt;-HTML
	  &lt;p&gt;&lt;small&gt;Search limited to  “#{selected_files.join(' ')}”&lt;/small&gt;&lt;/p&gt;
HTML
else
	Dir.chdir(directory)
	command = [ack_cmd, query]
end

puts &lt;&lt;-HTML
  &lt;table&gt;
HTML

# Used to highlight matches
query_re = Regexp.new( Regexp.escape(CGI.escapeHTML(query)), Regexp::IGNORECASE)

last_path = path = i = nil
err = ""
alternate = true
lines = 0

TextMate::Process.run(command, :interactive_input =&gt; false) do |line, type|
  case type
  when :err
    err &lt;&lt; line
  when :out
    lines = lines + 1
    line.gsub!(/^([^:]+):(\d+):(.*)$/) do

      relative_path, line_number, content = $1, $2, $3.strip
	
      relative_path.sub!(directory + "/", '') if ENV['TM_SELECTED_FILES']

      path = directory + '/' + relative_path
      url = "txmt://open/?url=file://#{path}&amp;line=#{line_number}"
      fname = "%s:%s" % [ellipsize_path(relative_path), line_number];
      fname = ":%s" % [ line_number ] if (path == last_path);
      
      content = escape(content).
                  # Highlight keywords
                  gsub(query_re) { %{&lt;a href="#{url}"&gt;&lt;strong class="keyword"&gt;#$&amp;&lt;/strong&gt;&lt;/a&gt;} }.
                  # Ellipsize before, between and after keywords
                  gsub(%r{(^[^&lt;]{25}|&lt;/strong&gt;[^&lt;]{15})([^&lt;]{20,})([^&lt;]{15}&lt;strong|[^&lt;]{25}$)}) do
                    %{#$1&lt;span class="ellipsis" title="#{escape($2)}"&gt;⋯&lt;/span&gt;#$3}
                  end
      &lt;&lt;-HTML

        &lt;tr class="#{ 'odd' unless (alternate = (not alternate)) } #{ 'newFile' if (path != last_path) }"&gt;
          &lt;td&gt;
            &lt;a href="#{ url }" title="#{ "%s:%s" % [path, line_number] }"&gt;
              #{ fname }
            &lt;/a&gt;
          &lt;/td&gt;
          &lt;td&gt;#{ content }&lt;/td&gt;
        &lt;/tr&gt;

      HTML
    end
    puts line
    last_path = path
  end
end

if lines
  # A paragraph inside the table ends up at the top even though it's output
  # at the end. Something of a hack :)
  puts &lt;&lt;-HTML
    &lt;p&gt;#{lines} matching line#{lines==1 ? '' : 's'}:&lt;/p&gt;
    #{RESIZE_TABLE}
  HTML
else
  puts &lt;&lt;-HTML
    &lt;tr id="empty"&gt;&lt;td colspan="2"&gt;No results.&lt;/td&gt;&lt;/tr&gt;
  HTML
end

if $? != 0
  TextMate::UI.alert(:critical, "Search In Project With Ack Error", err)
  TextMate.exit_discard
end

# TODO: see how to detect command not found in ruby and suggest using
# TM_ACK_COMMAND_PATH to solve it

puts &lt;&lt;-HTML
&lt;/table&gt;
HTML

html_footer

TextMate.exit_show_html
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>@F</string>
	<key>name</key>
	<string>Search in Project with ack</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>0B537D91-B21D-4A52-BFD8-D1E73669E2BD</string>
</dict>
</plist>
